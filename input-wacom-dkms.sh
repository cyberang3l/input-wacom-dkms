#!/bin/bash
#  input-wacom-dkms script will download the input-wacom drivers from the
#  website and install them in the system using dkms. I wrote and tested this
#  script in Ubuntu 14.04, but it should be working on different versions
#  of <at least> Ubuntu.
#
#  Copyright (C) 2015 Vangelis Tasoulas <cyberang3l@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
###################################
# Use this script at your own risk!
###################################
# The script will download the input-wacom version defined in variable "pkgver"
# from sourceforge, and install it in the local system using dkms. The already
# installed drivers will not be affected and whenever you want to revert the changes,
# just run the script with the 'uninstall' argument.
#
# A udev rules file to give write permissions to users to for chaning the status
# of the leds will also be created.
# 
#
# The script was generated by using the input-wacom-dkms package from Arch Linux as a guideline:
#     https://aur.archlinux.org/packages/input-wacom-dkms/
#
# Run the script with sudo (needs root privileges) and choose either "install" or "uninstall"
# as a command line argument.
# If you want to install a different version, just change the version number in variable "pkgver"

if [[ "$(whoami)" != "root" ]]; then
   echo "You must be root to execute this script."
   exit 1
fi

if [[ "$1" != "install" && "$1" != "uninstall" ]]; then
   echo "You should provide one argument to the script."
   echo "Accepted arguments:"
   echo "    'install', 'uninstall'"
   exit 1
fi

pkgname=input-wacom
pkgver=0.38.0
dest_dir="/usr/src/"
dkms_location="$dest_dir"/"$pkgname-$pkgver"/"dkms.conf"
blacklist_file="/etc/modprobe.d/blacklist-""$pkgname""-dkms.conf"
udev_rules_file="/etc/udev/rules.d/wacom.rules"

dkms=$(which dkms)
exit_status=$?
if [[ $exit_status -ne 0 ]]; then echo "DKMS was not found. Please install dkms (apt-get install dkms) and rerun this script."; fi

version_ge() {
   # Return 0 if "$1" is greater or equal of "$2"
   # Return 1 if "$1" is less than "$2"
   if [[ "$1" != "$2" ]]; then
	# If running here, the version numbers are not equal
	if [[ "$1" == "$(echo -e "$1\n$2" | sort -V | head -1)" ]]; then
	   # If running here, version number "$1" is less than "$2"
	   return 1
	fi
   fi
   # If running here, the version numbers are equal
   return 0
}

DRIVER_KERNEL_VER=
# ls -d */ | sed -e s'/\///' | sed -E 's/[a-zA-Z]+//g' | sort -V -r);
if [[ -z "$DRIVER_KERNEL_VER" ]]; then version_ge $(uname -r | sed -E 's/([0-9]+.[0-9]+.[0-9]+).*/\1/') 4.5.0 && DRIVER_KERNEL_VER=4.5; fi
if [[ -z "$DRIVER_KERNEL_VER" ]]; then version_ge $(uname -r | sed -E 's/([0-9]+.[0-9]+.[0-9]+).*/\1/') 3.17.0 && DRIVER_KERNEL_VER=3.17; fi
if [[ -z "$DRIVER_KERNEL_VER" ]]; then version_ge $(uname -r | sed -E 's/([0-9]+.[0-9]+.[0-9]+).*/\1/') 3.7.0 && DRIVER_KERNEL_VER=3.7; fi
if [[ -z "$DRIVER_KERNEL_VER" ]]; then version_ge $(uname -r | sed -E 's/([0-9]+.[0-9]+.[0-9]+).*/\1/') 2.6.38 && DRIVER_KERNEL_VER=2.6.38; fi
if [[ -z "$DRIVER_KERNEL_VER" ]]; then version_ge $(uname -r | sed -E 's/([0-9]+.[0-9]+.[0-9]+).*/\1/') 2.6.36 && DRIVER_KERNEL_VER=2.6.36; fi
if [[ -z "$DRIVER_KERNEL_VER" ]]; then version_ge $(uname -r | sed -E 's/([0-9]+.[0-9]+.[0-9]+).*/\1/') 2.6.30 && DRIVER_KERNEL_VER=2.6.30; fi
if [[ -z "$DRIVER_KERNEL_VER" ]]; then 
   # If the variable is still unset by now, the running kernel is < 2.6.30
   echo "Kernel version 2.6.30 and above are supported by this driver."
   echo "You Kernel version is: $(uname -r)"
   exit 1
fi

function check_if_installed {
   if [[ -d "/var/lib/dkms/$pkgname/" ]]; then
	echo "true"
   else
	echo "false"
   fi
}

function create_blacklist_file {
   cat << EOF > "$blacklist_file"
blacklist wacom
blacklist wacom_w8001

EOF
}

function create_dkms_file {
   cat << EOF > "$dkms_location"
PACKAGE_NAME="$pkgname"
PACKAGE_VERSION="$pkgver"
CLEAN="make clean"
MAKE[0]="./configure && make"
BUILT_MODULE_NAME[0]="wacom"
DEST_MODULE_NAME[0]="wacom_dkms"
BUILT_MODULE_NAME[1]="wacom_w8001"
DEST_MODULE_NAME[1]="wacom_w8001_dkms"
BUILT_MODULE_LOCATION[0]="$DRIVER_KERNEL_VER/"
BUILT_MODULE_LOCATION[1]="$DRIVER_KERNEL_VER/"
DEST_MODULE_LOCATION[0]="/kernel/drivers/input/tablet"
DEST_MODULE_LOCATION[1]="/kernel/drivers/input/touchscreen"
AUTOINSTALL="yes"

EOF
}

function create_udev_rules_file {
   # Create a udev rules to give permission to simple users to change the led status
   if version_ge "$DRIVER_KERNEL_VER" "3.17"; then
      cat << EOF > "$udev_rules_file"
ATTRS{idVendor}=="056a", RUN+="/bin/bash -c '/bin/chmod 666 /sys/class/hidraw/hidraw*/device/wacom_led/status_led*_select'"
EOF
   else
      cat << EOF > "$udev_rules_file"
ATTRS{idVendor}=="056a", RUN+="/bin/bash -c '/bin/chmod 666 /sys/bus/usb/devices/*/wacom_led/status_led*_select'"
EOF
   fi
}

if [[ "$1" == "install" ]]; then

   if [[ $(check_if_installed) == "true" ]]; then
	echo "It looks like '$pkgname' is already installed."
	echo "If you want to reinstall, please run the script with the 'uninstall' argument first to cleanup the previous installations."
	exit 1
   fi

   wget http://downloads.sourceforge.net/project/linuxwacom/xf86-input-wacom/input-wacom/"$pkgname"-"$pkgver".tar.bz2 -O "$dest_dir""$pkgname"-"$pkgver".tar.bz2

   cd "$dest_dir"

   # Extract
   tar xvf "$pkgname"-"$pkgver".tar.bz2

   # Remove the tar.bz2 file
   rm "$pkgname"-"$pkgver".tar.bz2
   
   create_blacklist_file
   create_dkms_file
   create_udev_rules_file

   $dkms install -m $pkgname -v $pkgver
   
   # Reload the udev rules
   # For debugging: udevadm test $(udevadm info --name=/dev/input/event17 | grep P: | cut -f2 -d " ")
   #                udevadm info --attribute-walk --name=/dev/input/event17
   # Change '/dev/input/event17' with the event assigned to your device.
   udevadm control --reload
   udevadm trigger
   
   echo -e "\n"
   echo "#####################################"
   echo -e "\n"
   echo "To avoid conflict with the original modules provided by the kernel, the dkms modules were renamed to 'wacom_dkms' and 'wacom_w8001_dkms'."
   echo "Should you need to manually load the module, use 'modprobe wacom_dkms' or 'modprobe wacom_w8001_dkms'."
   echo "To remove the modules, use 'rmmod wacom' or 'rmmod wacom_w8001' instead."
   echo -e "\n"
   
elif [[ "$1" == "uninstall" ]]; then
   # Just run some sanity checks first...
   
   # If it is installed
   if [[ $(check_if_installed) == "true" ]]; then
	# Get the installed version number
	pkgver=$(ls "/var/lib/dkms/$pkgname/" | head -1)
	dkms_location="$dest_dir"/"$pkgname-$pkgver"/"dkms.conf"
	
	# and if the dkms file does not exist
	if [[ ! -f "$dkms_location" ]]; then
	   # create the file before running $dkms remove
	   mkdir "$dest_dir"/"$pkgname-$pkgver"
	   create_dkms_file
	fi
   fi

   if [[ -f "$blacklist_file" ]]; then rm "$blacklist_file"; fi
   if [[ -f "$udev_rules_file" ]]; then rm $udev_rules_file; fi
   if [[ -f "$dkms_location" ]]; then
	$dkms remove -m $pkgname -v $pkgver --all
	rm "$dkms_location"
   fi
   if [[ -d "$dest_dir"/"$pkgname-$pkgver" ]]; then rm -rf "$dest_dir"/"$pkgname-$pkgver"; fi
   
fi
